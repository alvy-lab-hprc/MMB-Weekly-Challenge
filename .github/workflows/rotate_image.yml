name: Rotate Weekly Challenge Image

on:
  schedule:
    - cron: "*/5 * * * *"  # This should trigger every 5 minutes
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  rotate_image:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GH_TOKEN }}  # Use GitHub Secret for authentication

    - name: Verify Folder Structure
      run: |
        echo "Listing repository root contents"
        ls -l
        echo "Listing weekly_challenges folder contents"
        ls -l ./weekly_challenges
        echo "Listing target folder contents"
        ls -l ./target

    - name: Debugging Check if Workflow is Triggered
      run: |
        echo "Checking if the workflow is being triggered"
        echo "Current Date and Time: $(date)"
        echo "Checking if we are running as expected"
        echo "Scheduled run time: $(date)" >> scheduled_run_log.txt

    - name: Rotate Image
      run: |
        # Directories
        CHALLENGE_FOLDER="weekly_challenges"
        TARGET_FOLDER="target"
        TEST_FILE="$TARGET_FOLDER/Current.png"
        LAST_USED_FILE="$TARGET_FOLDER/last_used.txt"  # Store the last used image name
        
        # Ensure target folder exists
        mkdir -p "$TARGET_FOLDER"

        # Get list of images sorted by name (expected to be WC-1.png to WC-8.png)
        IMAGES=($(ls "$CHALLENGE_FOLDER" | sort))

        # Check the image list
        echo "Available images in '$CHALLENGE_FOLDER': ${IMAGES[@]}"

        # If last_used.txt exists, get the last used image from it
        if [ -f "$LAST_USED_FILE" ]; then
          LAST_USED=$(cat "$LAST_USED_FILE")
        else
          # If last_used.txt doesn't exist, start with WC-1.png
          LAST_USED="WC-1.png"
        fi

        # Check the last used image
        echo "Last used image: $LAST_USED"

        # Find the index of the last used image
        LAST_INDEX=-1
        for i in "${!IMAGES[@]}"; do
          if [[ "${IMAGES[$i]}" == "$LAST_USED" ]]; then
            LAST_INDEX=$i
            break
          fi
        done

        # Determine the next image index (cycle through images)
        NEXT_INDEX=$(( (LAST_INDEX + 1) % ${#IMAGES[@]} ))

        # Get the next image filename
        NEXT_IMAGE="${IMAGES[$NEXT_INDEX]}"
        
        # Check the next image
        echo "Next image to copy: $NEXT_IMAGE"

        # Copy the next image as 'Current.png'
        cp "$CHALLENGE_FOLDER/$NEXT_IMAGE" "$TEST_FILE"

        # Update the last used image file with the new image
        echo "$NEXT_IMAGE" > "$LAST_USED_FILE"
        
        # Check if the files were updated
        echo "Updated Current.png: $(file $TEST_FILE)"
        echo "Updated last_used.txt: $(cat $LAST_USED_FILE)"

    - name: Force Commit with Dummy Update
      run: |
        # Create a dummy update file with current timestamp (or other content)
        echo "Dummy update to trigger commit at $(date)" > dummy_update.txt

        # Git configuration for committing
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # Add all changes (including the dummy file)
        git add .

        # Commit changes (force commit if there's nothing to commit)
        git commit -m "Updated challenge image to $NEXT_IMAGE and dummy update" || git commit --allow-empty -m "Forcing commit to update Current.png"

        # Push changes to the repository
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # Authenticate using GitHub Secrets
